#BlueJ class context
comment0.target=MobileEnemyTank
comment0.text=\r\n\ <p><b>File\ name\:\ </b>\ MobileEnemyTank.java\r\n\ @version\ 1.4\r\n\ @since\ 14.08.2018\r\n\ <p><b>Last\ modification\ date\:\ </b>\ 02.10.2018\r\n\ @author\ Alexandru\ F.\ Dascalu\r\n\ <p><b>Copyright\:\ </b>\r\n\ <p>No\ copyright.*\ <p><b>Copyright\ (C)</b>\ 2018\ \ Alexandru\ F.\ Dascalu\r\n\ \r\n\ <p>MobileEnemyTank.java\ is\ part\ of\ Panzer\ Batallion.\r\n\ Panzer\ Batallion\ is\ free\ software\:\ you\ can\ redistribute\ it\ and/or\ modify\r\n\ it\ under\ the\ terms\ of\ the\ GNU\ General\ Public\ License\ as\ published\ by\r\n\ the\ Free\ Software\ Foundation,\ either\ version\ 3\ of\ the\ License,\ or\r\n\ (at\ your\ option)\ any\ later\ version.\r\n\ \r\n\ <p>This\ program\ is\ distributed\ in\ the\ hope\ that\ it\ will\ be\ useful,\r\n\ but\ WITHOUT\ ANY\ WARRANTY;\ without\ even\ the\ implied\ warranty\ of\r\n\ MERCHANTABILITY\ or\ FITNESS\ FOR\ A\ PARTICULAR\ PURPOSE.\ \ See\ the\r\n\ GNU\ General\ Public\ License\ for\ more\ details.\r\n\ \r\n\ <p>You\ should\ have\ received\ a\ copy\ of\ the\ GNU\ General\ Public\ License\ v3\r\n\ along\ with\ this\ program.\ \ If\ not,\ see\ <a\ href\="https\://www.gnu.org/licenses/">https\://www.gnu.org/licenses/</a>\ .\r\n\ \r\n\ <p>A\ summary\ of\ the\ license\ can\ be\ found\ here\:\ \r\n\ <a\ href\="https\://choosealicense.com/licenses/gpl-3.0/">https\://choosealicense.com/licenses/gpl-3.0/</a>\ .\r\n\ \r\n\ <p><b>Purpose\:\ </b>\r\n\ <p>\ This\ class\ models\ a\ mobile\ enemy\ tank\ for\ a\ Greenfoot\ recreation\ of\ the\ \r\n\ Wii\ Tanks\ game\ for\ the\ Nintendo\ Wii.\ By\ default,\ it\ generates\ a\ path\ to\ \r\n\ follow\ in\ the\ game\ world\ using\ the\ world's\ graph,\ follows\ it,\ decides\ to\ \r\n\ move\ while\ turning\ or\ not,\ plays\ a\ sound\ when\ moving\ and\ tells\ it's\ turret\ \r\n\ to\ aim\ and\ fire.\ It\ is\ meant\ to\ be\ inherited\ always\ and\ you\ should\ not\ have\r\n\ an\ actor\ that\ is\ just\ a\ MobileEnemyTank\ object\ since\ the\ class\ was\ not\ meant\r\n\ to\ be\ used\ in\ this\ way.\r\n\ \r\n\ <p><b>Version\ History</b>\r\n\ <p>\t-1.0\ -\ Created\ the\ class.\r\n\ <p>\t-1.1\ -\ Made\ the\ tanks\ move\ more\ naturally\ by\ being\ able\ to\ move\ while\r\n\ \ turning\ if\ they\ can\ still\ get\ to\ the\ desired\ rotation\ by\ doing\ so\ and\ made\r\n\ \ the\ tank\ register\ reaching\ a\ point\ by\ being\ close\ to\ it,\ and\ not\ \r\n\ \ necessarily\ at\ the\ exact\ coordinates.\r\n\ \ <p>\t-1.2\ -\ Made\ tanks\ not\ run\ into\ walls\ when\ they\ move\ while\ turning.\r\n\ \ <p>\t-1.3\ -\ Made\ tanks\ avoid\ land\ mines.\r\n\ \ <p>\t-1.4\ -\ Made\ tanks\ avoid\ shell.\r\n
comment1.params=startX\ startY\ startRotation
comment1.target=MobileEnemyTank(int,\ int,\ int)
comment1.text=\r\n\ Makes\ a\ new\ Mobile\ Enemy\ Tank\ whose\ starting\ location\ in\ the\ level\ is\ at\r\n\ the\ given\ coordinates.\r\n\ @param\ startX\ The\ x\ coordinate\ of\ the\ initial\ position\ of\ the\ tank\ in\ \r\n\ the\ level.\r\n\ @param\ startY\ The\ y\ coordinate\ of\ the\ initial\ position\ of\ the\ tank\ in\ \r\n\ the\ level.\r\n\ @param\ startRotation\ The\ starting\ rotation\ of\ this\ tank\ in\ the\ world.\r\n
comment10.params=
comment10.target=Shell\ detectIncomingShells()
comment10.text=\r\n\ Detects\ if\ this\ tank\ is\ dangerously\ close\ to\ an\ incoming\ shell.\ It\ \r\n\ returns\ a\ reference\ to\ one\ of\ the\ shells\ that\ is\ too\ close\ to\ the\ tank\r\n\ so\ that\ the\ tank\ will\ be\ able\ to\ avoid\ that\ shell.\ The\ tanks\ are\ not\ \r\n\ very\ smart,\ so\ if\ more\ than\ one\ shell\ is\ too\ close\ to\ the\ tank,\ it\ will\ \r\n\ only\ try\ to\ avoid\ one.\r\n\ @return\ A\ reference\ to\ one\ of\ the\ shells\ that\ is\ dangerously\ close\ to\ \r\n\ this\ tank.\ Ignores\ shells\ fired\ by\ \ this\ tank's\ turret.\r\n
comment11.params=incomingShell
comment11.target=void\ calculateShellAvoidance(Shell)
comment11.text=\r\n\ Calculate\ the\ way\ this\ tank\ should\ avoid\ the\ incoming\ shell\ given\ as\r\n\ an\ argument.\r\n\ @param\ incomingShell\ The\ shell\ that\ is\ to\ be\ avoided\ by\ this\ tank.\r\n
comment12.params=
comment12.target=void\ avoidIncomingShell()
comment12.text=Makes\ the\ tank\ avoid\ the\ incoming\ shell,\ based\ on\ the\ targetRotation\ and\ \r\nthe\ boolean\ flags\ set\ by\ the\ calculateShellAvoidance(Shell)\ method.
comment13.params=s
comment13.target=boolean\ shellIsMovingAway(Shell)
comment13.text=\r\n\ Computes\ whether\ or\ not\ the\ given\ shell\ is\ moving\ away\ from\ the\ current\ \r\n\ position\ of\ this\ tank\ or\ not.\r\n\ @param\ s\ The\ shell\ that\ we\ want\ to\ see\ if\ it\ is\ moving\ away\ from\ this\ tank.\r\n\ @return\ True\ if\ it\ is\ moving\ away\ from\ tank,\ false\ if\ not.\r\n
comment14.params=
comment14.target=LandMine\ detectLandMines()
comment14.text=\r\n\ Detects\ if\ this\ tank\ is\ dangerously\ close\ to\ a\ mine.\ It\ returns\ a\ \r\n\ reference\ to\ one\ of\ the\ mines\ that\ is\ too\ close\ to\ the\ tank\ so\ that\r\n\ the\ tank\ will\ be\ able\ to\ avoid\ that\ mine.\ The\ tanks\ are\ not\ very\ \r\n\ smart,\ so\ if\ more\ than\ one\ mine\ is\ too\ close\ to\ the\ tank,\ it\ will\ \r\n\ only\ try\ to\ avoid\ one.\r\n\ @return\ A\ reference\ to\ one\ of\ the\ mines\ that\ is\ dangerously\ close\ to\ \r\n\ this\ tank.\r\n
comment15.params=mine
comment15.target=void\ avoidLandMine(LandMine)
comment15.text=\r\n\ This\ method\ modifies\ the\ path\ this\ tank\ follows\ so\ that\ it\ will\ avoid\ the\r\n\ mine\ given\ as\ an\ argument.\r\n\ @param\ mine\ The\ mine\ that\ is\ to\ be\ avoided\ by\ this\ tank.\r\n
comment16.params=
comment16.target=void\ layMine()
comment16.text=Makes\ the\ tank\ randomly\ lay\ mines,\ based\ on\ how\ many\ mines\ this\ type\ of\ \r\ntank\ can\ lay\ and\ how\ often\ it\ can\ do\ such.
comment17.params=
comment17.target=void\ generateNextMineLayingTime()
comment17.text=Generates\ a\ new\ random\ point\ in\ time\ this\ tank\ will\ lay\ the\ next\ mine.\ \r\n\ This\ point\ in\ time\ will\ be\ in\ a\ random\ number\ of\ milliseconds\ from\ now\r\n\ on.\ This\ random\ number\ is\ between\ half\ of\ the\ mine\ laying\ period\ of\ \r\nthis\ tank\ and\ the\ mine\ laying\ period\ of\ this\ tank.
comment18.params=
comment18.target=boolean\ isMoving()
comment18.text=\r\n\ Checks\ if\ the\ tank\ is\ moving.\r\n\ @return\ True\ if\ the\ tank\ is\ moving,\ false\ if\ not.\ Returns\ a\ boolean\ set\ \r\n\ according\ to\ the\ tank's\ movements\ in\ the\ private\ methods\ that\ control\r\n\ this\ tank's\ movements.\r\n
comment19.params=
comment19.target=boolean\ isMovingForward()
comment19.text=\r\n\ Checks\ if\ the\ tank\ is\ moving\ forward.\r\n\ @return\ True\ if\ the\ tank\ is\ moving\ forward,\ false\ if\ not.\ Returns\ a\ \r\n\ boolean\ set\ according\ to\ the\ tank's\ movements\ in\ the\ private\ methods\r\n\ that\ control\ this\ tank's\ movements.\r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ Act\ -\ do\ whatever\ the\ Mobile\ Enemy\ Tank\ wants\ to\ do.\ This\ method\ is\ \r\n\ called\ whenever\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ \r\n\ environment.\ In\ this\ case,\ this\ method\ makes\ the\ tank\ generate\ a\ path\ \r\n\ to\ a\ point\ in\ the\ game\ world\ if\ none\ exists\ or\ follow\ the\ current\ path,\r\n\ after\ which\ the\ super\ type\ act()\ method\ is\ called.\r\n
comment20.params=
comment20.target=boolean\ isMovingBackward()
comment20.text=\r\n\ Checks\ if\ the\ tank\ is\ moving\ backward.\r\n\ @return\ True\ if\ the\ tank\ is\ moving\ backward,\ false\ if\ not.\ Returns\ a\ \r\n\ boolean\ set\ according\ to\ the\ tank's\ movements\ in\ the\ private\ methods\r\n\ that\ control\ this\ tank's\ movements.\r\n
comment21.params=
comment21.target=void\ reloadTank()
comment21.text=Method\ reloads\ this\ tank\ into\ the\ game\ world\ to\ prepare\ it\ for\ another\ start\r\n\ of\ the\ current\ level,\ meaning\ it\ resets\ the\ position\ and\ orientation\ of\ this\r\ntank\ and\ it's\ turret,\ and\ all\ other\ instance\ variables.
comment22.params=
comment22.target=int\ getMineAvoidanceDistance()
comment22.text=\r\n\ Indicates\ the\ safe\ distance\ this\ type\ of\ tank\ will\ keep\ from\ a\ mine\ when\r\n\ it\ is\ avoiding\ a\ mine.\ \r\n\ @return\ 0,\ unless\ overriden,\ since\ this\ class\ should\ always\ be\ extended\ \r\n\ and\ there\ is\ no\ set\ behaviour\ for\ a\ default\ mobile\ enemy\ tank.\r\n
comment23.params=
comment23.target=int\ getShellAvoidanceDistance()
comment23.text=\r\n\ Indicates\ the\ distance\ from\ which\ the\ tank\ starts\ evasive\ action\ to\ avoid\r\n\ an\ incoming\ shell.\r\n\ @return\ 0,\ unless\ overriden,\ since\ this\ class\ should\ always\ be\ extended\ \r\n\ and\ there\ is\ no\ set\ behaviour\ for\ a\ default\ mobile\ enemy\ tank.\r\n
comment24.params=
comment24.target=int\ getMineLayingPeriod()
comment24.text=\r\n\ Gets\ a\ number\ that\ indicates\ the\ maximum\ period\ in\ milliseconds\r\n\ between\ when\ mines\ are\ laid.\ The\ higher\ the\ number\ is\ ,\ the\ tank\ will\r\n\ lay\ mines\ more\ rarely.\ \ Unless\ overridden,\ it\ returns\ 1,\ so\ that\ unless\r\n\ overridden\ the\ tank\ will\ lay\ all\ it's\ mines\ immediately\ and\ show\ the\ \r\n\ programmer\ something\ is\ wrong.\r\n\ @return\ The\ maximum\ period\ in\ milliseconds\ between\ when\ mines\ \r\n\ are\ laid\ by\ this\ tank.\r\n
comment3.params=
comment3.target=void\ generatePath()
comment3.text=Generates\ a\ path\ to\ a\ destination\ point\ in\ the\ game\ world\ for\ the\ tank\ \r\nto\ follow.
comment4.params=
comment4.target=GraphPoint\ chooseDestinationPoint()
comment4.text=Chooses\ a\ random\ destination\ point\ for\ the\ tank\ to\ get\ to.
comment5.params=
comment5.target=void\ followPath()
comment5.text=Makes\ the\ tank\ follow\ the\ path\ by\ passing\ by\ each\ node\ in\ the\ path\ until\r\nthe\ destination\ is\ reached.
comment6.params=point
comment6.target=boolean\ reachedPoint(GraphPoint)
comment6.text=\r\n\ Detects\ if\ this\ tank\ has\ reached\ a\ point\ in\ the\ world\ graph,\ meaning\ it\ \r\n\ is\ within\ a\ certain\ distance\ from\ that\ node's\ coordinates.\r\n\ @param\ point\ A\ point\ in\ the\ world\ graph\ the\ tank\ wants\ to\ reach.\r\n\ @return\ True\ if\ the\ tank\ has\ reached,\ false\ if\ not.\r\n
comment7.params=nextPoint
comment7.target=int\ calculateTargetRotation(GraphPoint)
comment7.text=\r\n\ Calculates\ the\ rotation\ this\ tank\ needs\ to\ have\ to\ turn\ toward\ the\ \r\n\ given\ graph\ point.\r\n\ @param\ nextPoint\ The\ point\ this\ tank\ wants\ to\ turn\ towards.\r\n\ @return\ The\ rotation,\ from\ 0\ to\ 359,\ this\ needs\ to\ have.\r\n
comment8.params=
comment8.target=int\ calculateTurn()
comment8.text=\r\n\ Calculates\ which\ way\ and\ how\ much\ this\ tank\ should\ turn\ to\ get\ to\ the\ \r\n\ desired\ target\ rotation.\r\n\ @return\ The\ amount\ in\ degrees\ the\ tank\ should\ turn\ in\ this\ call\ of\ the\ \r\n\ act()\ method.\ Negative\ values\ mean\ the\ tank\ will\ turn\ counter\ clockwise,\r\n\ positive\ values\ clockwise.\r\n
comment9.params=targetRotation\ nextPoint
comment9.target=boolean\ canMoveWhileTurning(int,\ GraphPoint)
comment9.text=\r\n\ Decides\ whether\ this\ tank\ can\ move\ while\ it\ is\ turning.\ Sometimes\ if\ \r\n\ the\ tank\ does\ that\ it\ cannot\ reached\ the\ rotation\ towards\ the\ next\ \r\n\ point\ or\ it\ runs\ into\ a\ wall.\ So\ it\ is\ necessary\ to\ check\ this\ tank\ \r\n\ can\ move\ while\ turning\ before\ doing\ so.\r\n\ @param\ targetRotation\ The\ rotation\ this\ tank\ needs\ to\ get\ to.\r\n\ @param\ nextPoint\ The\ graphPoint\ whose\ position\ this\ tank\ needs\ to\ reach.\r\n\ @return\ True\ if\ this\ tank\ can\ safely\ move\ while\ turning,\ false\ if\ not.\r\n
numComments=25
