#BlueJ class context
comment0.target=Tank
comment0.text=\r\n\ <p><b>File\ name\:\ </b>\ Tank.java\r\n\ @version\ 1.7\r\n\ @since\ 02.05.2018\r\n\ <p><p><b>Last\ modification\ date\:\ </b>\ 03.09.2018\r\n\ @author\ Alexandru\ F.\ Dascalu\r\n\ <p><b>Copyright\:\ </b>\r\n\ <p>No\ copyright.\r\n\ \r\n\ <p><b>Purpose\:\ </b>\r\n\ <p>\ This\ class\ models\ a\ general\ tank\ for\ a\ Greenfoot\ recreation\ of\ the\ Wii\ Tanks\ \r\n\ game\ for\ the\ Nintendo\ Wii.\ By\ default,\ it\ moves,\ plays\ a\ sound\ when\ moving\r\n\ and\ tells\ it's\ turret\ to\ aim\ and\ fire.\ It\ is\ meant\ to\ be\ inherited\ always\ and\r\n\ you\ should\ not\ have\ an\ actor\ that\ is\ just\ a\ Tank\ object\ since\ the\ class\ was\r\n\ not\ meant\ to\ be\ used\ in\ this\ way.\r\n\ \r\n\ <p><b>Version\ History</b>\r\n\ <p>\t-1.0\ -\ Created\ a\ simple\ tank\ that\ does\ not\ move.\r\n\ <p>\t-1.1\ -\ Made\ the\ tank\ move\ using\ keyboard\ input.\r\n\ <p>\t-1.2\ -\ Made\ the\ tank\ play\ a\ sound\ when\ moving.\r\n\ <p>\t-1.3\ -\ Made\ the\ tank\ generate\ a\ simple\ tank\ turret\ on\ top\ if\ it\ when\ it\r\n\ is\ added\ to\ the\ world.\r\n\ <p>\ \ -1.4\ -\ Made\ the\ tank\ detect\ collisions\ with\ walls\ and\ not\ move\ into\ wall\r\n\ blocks.\r\n\ <p>\ \ -1.5\ -\ Modified\ this\ class\ to\ be\ a\ general\ tank\ class\ and\ moved\ part\ of\ \r\n\ code\ into\ the\ PlayerTank\ class,\ which\ inherits\ from\ this.\r\n\ <p>\t-1.6\ -\ Modified\ this\ class\ so\ tanks\ can\ push\ each\ other\ while\ moving.\r\n\ <p>\t-1.7\ -\ Added\ a\ getMaxTurnSpeed()\ method\ to\ be\ overriden\ in\ the\ player\ \r\n\ tank\ and\ mobile\ enemy\ tanks\ subclasses.\r\n
comment1.params=startX\ startY\ startRotation
comment1.target=Tank(int,\ int,\ int)
comment1.text=\r\n\ Makes\ a\ new\ tank\ object.\r\n\ @param\ startX\ The\ starting\ x\ position\ of\ the\ tank\ in\ the\ world.\r\n\ @param\ startY\ The\ starting\ y\ position\ of\ the\ tank\ in\ the\ world.\r\n\ @param\ startRotation\ The\ starting\ rotation\ of\ this\ tank\ in\ the\ world.\r\n
comment10.params=
comment10.target=boolean\ canTurnLeft()
comment10.text=\r\n\ Method\ checks\ if\ the\ tank\ can\ turn\ left.\r\n\ @return\ True\ if\ the\ tank\ can\ turn\ left,\ false\ if\ not.\r\n
comment11.params=
comment11.target=boolean\ isMoving()
comment11.text=\r\n\ Checks\ if\ the\ tank\ is\ moving.\r\n\ @return\ True\ if\ the\ tank\ is\ moving,\ false\ if\ not.\ Because\ most\ enemy\ tanks\r\n\ move\ continuously,\ this\ method\ always\ returns\ true\ unless\ overridden.\r\n
comment12.params=
comment12.target=boolean\ isMovingForward()
comment12.text=\r\n\ Checks\ if\ the\ tank\ is\ moving\ forward.\r\n\ @return\ True\ if\ the\ tank\ is\ moving\ forward,\ false\ if\ not.\ Because\ most\ \r\n\ enemy\ tanks\ move\ continuously,\ this\ method\ always\ returns\ true\ unless\ \r\n\ overridden.\r\n
comment13.params=
comment13.target=boolean\ isMovingBackward()
comment13.text=\r\n\ Checks\ if\ the\ tank\ is\ moving\ backward.\r\n\ @return\ True\ if\ the\ tank\ is\ moving\ backward,\ false\ if\ not.\ Because\ most\ \r\n\ enemy\ tanks\ move\ forward\ continuously,\ this\ method\ always\ returns\ false\r\n\ unless\ overridden.\r\n
comment14.params=point
comment14.target=int\ getXOffset(java.lang.String)
comment14.text=\r\n\ Method\ returns\ the\ approximate\ distance\ (or\ offset)\ between\ the\ x\ position\r\n\ of\ the\ centre\ of\ the\ tank\ and\ the\ x\ position\ of\ one\ of\ the\ six\ points\ on\ \r\n\ the\ edges\ of\ the\ tank\ (front\ left\ corner,\ front\ right\ corner,\ middle\ of\ \r\n\ front\ side,\ back\ left\ corner,\ back\ right\ corner\ and\ middle\ of\ back\ side.)\r\n\ @param\ point\ A\ string\ that\ tells\ the\ method\ which\ point\ we\ want\ the\ offset\r\n\ for.\r\n\ @return\ The\ distance\ between\ the\ x\ position\ of\ the\ tank\ and\ the\ x\ position\ \r\n\ of\ the\ point\ given\ in\ the\ string\ argument.\r\n
comment15.params=point
comment15.target=int\ getYOffset(java.lang.String)
comment15.text=\r\n\ Method\ returns\ the\ approximate\ distance\ (or\ offset)\ between\ the\ y\ position\r\n\ of\ the\ centre\ of\ the\ tank\ and\ the\ y\ position\ of\ one\ of\ the\ six\ points\ on\ the\r\n\ edges\ of\ the\ tank\ (front\ left\ corner,\ front\ right\ corner,\ middle\ of\ front\r\n\ side,\ back\ left\ corner,\ back\ right\ corner\ and\ middle\ of\ back\ side.)\r\n\ @param\ point\ A\ string\ that\ tells\ the\ method\ which\ point\ we\ want\ the\ offset\r\n\ for.\r\n\ @return\ The\ distance\ between\ the\ y\ position\ of\ the\ tank\ and\ the\ y\ position\ \r\n\ of\ the\ point\ given\ in\ the\ string\ argument.\r\n
comment16.params=otherTank
comment16.target=java.lang.String\ getContactCorner(Tank)
comment16.text=\r\n\ Locates\ what\ corner\ of\ this\ tank\ is\ touched\ by\ the\ other\ tank\ given\ as\ a\ \r\n\ parameter.\r\n\ @param\ otherTank\ Any\ other\ tank\ actor.\r\n\ @return\ A\ string\ representing\ the\ corner\ that\ is\ touched\ by\ the\ given\ tank,\r\n\ or\ null\ if\ that\ tank\ does\ not\ touch\ a\ corner\ of\ this\ tank.\r\n
comment17.params=
comment17.target=void\ playSound()
comment17.text=Make\ the\ tank\ play\ a\ sound\ if\ it\ is\ moving.
comment18.params=
comment18.target=void\ pushOtherTanks()
comment18.text=\r\n\ Checks\ if\ this\ tank\ should\ other\ tanks\ while\ it\ moves\ and\ calculates\ the\ \r\n\ x\ and\ y\ distances\ by\ which\ the\ other\ tanks\ should\ be\ moved.\r\n
comment19.params=x\ y
comment19.target=java.lang.String\ getQuadrant(int,\ int)
comment19.text=\r\n\ Calculates\ what\ diagonal\ quadrant\ of\ this\ tank\ a\ point\ with\ the\r\n\ given\ coordinates\ is\ in.\ It\ also\ applies\ to\ points\ outside\ the\ tank\r\n\ (the\ quadrants\ start\ from\ the\ centre\ of\ this\ tank\ and\ their\ \r\n\ imaginary\ edges\ extend\ up\ to\ the\ world's\ boundary.)\ Takes\ into\ account\ \r\n\ the\ rotation\ of\ this\ tank.\r\n\ @param\ x\ The\ x\ coordinate\ of\ the\ point.\r\n\ @param\ y\ The\ y\ coordinate\ of\ the\ point.\r\n\ @return\ A\ string\ representing\ the\ diagonal\ quadrant\ the\ point\ is\ in\ \:\r\n\ "top",\ "bottom",\ "left\ or"right".\r\n
comment2.params=world
comment2.target=void\ addedToWorld(greenfoot.World)
comment2.text=Method\ sets\ the\ correct\ rotation\ of\ the\ tank\ after\ it\ is\ placed\ in\ the\ \r\nworld\ and\ then\ makes\ a\ new\ tank\ turret\ that\ will\ be\ placed\ on\ this\ tank.
comment20.params=
comment20.target=Turret\ getTurret()
comment20.text=\r\n\ Getter\ for\ the\ turret\ of\ this\ tank.\r\n\ @return\ A\ reference\ to\ this\ tank's\ turret.\r\n
comment21.params=
comment21.target=int\ getSpeed()
comment21.text=\r\n\ The\ speed\ of\ this\ tank,\ meaning\ the\ distance\ in\ cells\ that\ the\ tank\ moves\r\n\ each\ time\ the\ move(int)\ method\ is\ called.\r\n\ @return\ 0,\ unless\ overridden,\ since\ a\ default\ tank\ does\ not\ have\ a\ specific\ \r\n\ speed.\ This\ method\ should\ always\ be\ overridden.\r\n
comment22.params=
comment22.target=int\ getNumberOfMines()
comment22.text=\r\n\ The\ number\ of\ mines\ this\ tank\ can\ lay\ in\ one\ level.\r\n\ @return\ 0,\ unless\ overridden,\ since\ a\ default\ tank\ does\ not\ lay\ any\ mines.\r\n\ This\ method\ should\ always\ be\ overridden.\r\n
comment23.params=
comment23.target=int\ getMaxTurnSpeed()
comment23.text=\r\n\ Getter\ The\ maximum\ number\ of\ degrees\ by\ which\ this\ tank\ can\ turn\ each\ \r\n\ time\ the\ act()\ method\ is\ called.\ Used\ by\ mobile\ enemy\ tanks\ and\ the\ \r\n\ player\ tank.\r\n\ @return\ \tThe\ maximum\ turn\ speed\ of\ this\ type\ of\ tank.It\ returns\ 0\ \r\n\ because\ a\ default\ tank\ does\ not\ have\ a\ specific\ turn\ speed.\ This\ method\ \r\n\ should\ always\ be\ overridden.\r\n
comment24.params=
comment24.target=void\ deleteTank()
comment24.text=Deletes\ this\ tank\ and\ it's\ turret\ along\ with\ any\ other\ associated\ actors\r\nfrom\ this\ game\ world.
comment25.params=
comment25.target=void\ reloadTank()
comment25.text=Method\ reloads\ this\ tank\ into\ the\ game\ world\ to\ prepare\ it\ for\ another\ start\r\n\ of\ the\ current\ level,\ meaning\ it\ resets\ the\ position\ and\ orientation\ of\ this\r\ntank\ and\ it's\ turret,\ and\ all\ other\ instance\ variables.
comment26.params=angle
comment26.target=double\ normalizeAngle(double)
comment26.text=\r\n\ Normalises\ the\ value\ of\ an\ angle\ in\ degrees.\ Meaning\ it\ brings\ the\ value\ \r\n\ of\ angle\ into\ an\ equivalent\ value\ between\ 0\ and\ 359.\r\n\ @param\ angle\ The\ angle\ that\ will\ be\ normalised.\r\n\ @return\ The\ normalised\ value\ of\ the\ angle.\r\n
comment27.params=tank
comment27.target=double\ getDistanceFrom(Tank)
comment27.text=\r\n\ Gets\ the\ distance\ between\ this\ tank\ and\ another\ given\ tank.\r\n\ @return\ The\ distance\ between\ this\ tank\ and\ the\ given\ tank\ as\ a\ double.\r\n
comment3.params=distance
comment3.target=void\ move(int)
comment3.text=\r\n\ Moves\ this\ tank\ by\ approximately\ the\ distance\ given\ as\ a\ parameter\r\n\ in\ the\ direction\ it\ is\ currently\ facing.\ Overrides\ the\ default\ one\ so\ that\r\n\ errors\ do\ not\ accumulate\ over\ time\ dues\ to\ the\ fact\ in\ Greenfoot\ actor\r\n\ position\ is\ represented\ by\ integers\ and\ not\ real\ numbers.\ Since\ before\r\n\ with\ each\ call\ of\ the\ method\ the\ rounding\ to\ the\ nearest\ integers\ would\r\n\ add\ over\ time,\ we\ store\ the\ correct\ coordinates\ as\ doubles\ and\ set\ the\ \r\n\ location\ to\ a\ rounded\ integer\ of\ these\ values,\ precision\ is\ not\ lost\ \r\n\ with\ each\ call\ of\ this\ method.\ Makes\ the\ tanks\ actually\ move\ how\ they\r\n\ should\ move,\ not\ with\ deviations\ like\ before.\r\n\ @param\ distance\ The\ distance\ the\ tank\ will\ be\ moved\ in\ it's\ current\ \r\n\ direction.\r\n
comment4.params=dx\ dy\ pushingTank
comment4.target=void\ move(double,\ double,\ Tank)
comment4.text=\r\n\ Moves\ this\ tank\ on\ each\ axis\ by\ the\ distances\ given.\ Makes\ sure\ rounding\ \r\n\ errors\ do\ not\ accumulate.\ It\ is\ used\ when\ this\ tank\ is\ pushed\ by\ another\r\n\ tank.\ This\ method\ also\ ensures\ this\ tank\ is\ not\ pushed\ by\ another\ tank\ \r\n\ into\ a\ wall\ and\ ensures\ that\ if\ this\ tank\ cannot\ be\ pushed\ on\ one\ axis,\r\n\ neither\ will\ the\ other\ tank\ be\ able\ to\ move\ on\ that\ axis\ (and\ thus\ \r\n\ overlap\ this\ tank).\r\n\ @param\ dx\ The\ distance\ the\ tank\ will\ be\ moved\ horizontally.\r\n\ @param\ dy\ The\ distance\ the\ tank\ will\ be\ moved\ vertically.\r\n\ @param\ pushingTank\ The\ tank\ that\ is\ pushing\ this\ tank.\ This\ reference\ \r\n\ is\ needed\ so\ if\ this\ tank\ cannot\ be\ pushed\ on\ one\ axis,\ the\ pushing\ Tank\r\n\ will\ also\ not\ move\ on\ that\ axis.\ If\ this\ reference\ is\ null,\ then\ this\ tank\r\n\ is\ not\ being\ pushed\ so\ this\ method\ just\ moves\ this\ tank\ on\ each\ axis\ by\r\n\ the\ distances\ given.\r\n
comment5.params=
comment5.target=void\ act()
comment5.text=\r\n\ Act\ -\ do\ whatever\ the\ Tank\ wants\ to\ do.\ This\ method\ is\ called\ whenever\ the\r\n\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\ In\ this\ case,\ this\r\n\ method\ makes\ the\ tank\ play\ a\ sound\ if\ it\ moves\ and\ tells\ it's\ turret\ to\ \r\n\ aim\ and\ fire.\r\n
comment6.params=
comment6.target=void\ layMine()
comment6.text=Makes\ the\ tank\ lay\ down\ a\ land\ mine.
comment7.params=
comment7.target=boolean\ canMoveForwards()
comment7.text=\r\n\ Method\ checks\ if\ the\ tank\ can\ move\ forwards.\r\n\ @return\ True\ if\ the\ tank\ can\ move\ forwards,\ false\ if\ not.\r\n
comment8.params=
comment8.target=boolean\ canMoveBackwards()
comment8.text=\r\n\ Method\ checks\ if\ the\ tank\ can\ move\ backwards.\r\n\ @return\ True\ if\ the\ tank\ can\ move\ backwards,\ false\ if\ not.\r\n
comment9.params=
comment9.target=boolean\ canTurnRight()
comment9.text=\r\n\ Method\ checks\ if\ the\ tank\ can\ turn\ right.\r\n\ @return\ True\ if\ the\ tank\ can\ turn\ right,\ false\ if\ not.\r\n
numComments=28
