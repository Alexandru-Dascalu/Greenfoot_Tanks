#BlueJ class context
comment0.target=GraphPoint
comment0.text=\r\n\ <p><b>File\ name\:\ </b>\ GraphPoint.java\r\n\ @version\ 1.0\r\n\ @since\ 26.08.2018\r\n\ <p><b>Last\ modification\ date\:\ </b>\ 05.10.2018\r\n\ @author\ Alexandru\ F.\ Dascalu\r\n\ <p><b>Copyright\ (C)</b>\ 2018\ \ Alexandru\ F.\ Dascalu\r\n\ \r\n\ <p>GreenPoint.java\ is\ part\ of\ Panzer\ Batallion.\r\n\ Panzer\ Batallion\ is\ free\ software\:\ you\ can\ redistribute\ it\ and/or\ modify\r\n\ it\ under\ the\ terms\ of\ the\ GNU\ General\ Public\ License\ as\ published\ by\r\n\ the\ Free\ Software\ Foundation,\ either\ version\ 3\ of\ the\ License,\ or\r\n\ (at\ your\ option)\ any\ later\ version.\r\n\ \r\n\ <p>This\ program\ is\ distributed\ in\ the\ hope\ that\ it\ will\ be\ useful,\r\n\ but\ WITHOUT\ ANY\ WARRANTY;\ without\ even\ the\ implied\ warranty\ of\r\n\ MERCHANTABILITY\ or\ FITNESS\ FOR\ A\ PARTICULAR\ PURPOSE.\ \ See\ the\r\n\ GNU\ General\ Public\ License\ for\ more\ details.\r\n\ \r\n\ <p>You\ should\ have\ received\ a\ copy\ of\ the\ GNU\ General\ Public\ License\ v3\r\n\ along\ with\ this\ program.\ \ If\ not,\ see\ <a\ href\="https\://www.gnu.org/licenses/">https\://www.gnu.org/licenses/</a>\ .\r\n\ \r\n\ <p>A\ summary\ of\ the\ license\ can\ be\ found\ here\:\ \r\n\ <a\ href\="https\://choosealicense.com/licenses/gpl-3.0/">https\://choosealicense.com/licenses/gpl-3.0/</a>\ .\r\n\ \r\n\ <p><b>Purpose\:\ </b>\r\n\ <p>\ This\ class\ describes\ a\ graph\ node\ used\ for\ finding\ the\ shortest\ path\ for\ a\r\n\ Greenfoot\ recreation\ of\ the\ Wii\ Tanks\ game\ for\ the\ Nintendo\ Wii.\ It\ is\ a\ node\ \r\n\ in\ the\ graph\ of\ the\ game\ world.\ It\ has\ 8\ neighbours,\ corresponding\ coordinates\r\n\ in\ the\ game\ world,\ and\ class\ variables\ that\ allow\ it\ to\ be\ used\ for\ Diejkstra's\r\n\ algorithm.\ These\ nodes\ are\ not\ meant\ to\ be\ placed\ in\ the\ game\ world\ in\ points\ \r\n\ through\ which\ a\ tank\ can\ not\ pass\ without\ hitting\ a\ wall.\r\n\ \r\n\ <p><b>Version\ History</b>\r\n\ <p>\t-1.0\ -\ Created\ the\ class.\r\n
comment1.params=x\ y
comment1.target=GraphPoint(int,\ int)
comment1.text=\r\n\ Makes\ a\ new\ graph\ point\ representing\ the\ point\ in\ the\ game\ world\ at\ \r\n\ the\ given\ coordinates.\r\n\ @param\ x\ The\ x\ coordinate\ of\ the\ point\ this\ node\ represents.\r\n\ @param\ y\ The\ y\ coordinate\ of\ the\ point\ this\ node\ represents.\r\n
comment10.params=visited
comment10.target=void\ setVisited(boolean)
comment10.text=\r\n\ Sets\ the\ boolean\ value\ that\ indicates\ whether\ this\ node\ has\ been\ visited\r\n\ or\ not\ in\ the\ current\ execution\ of\ the\ shortest\ path\ algorithm.\r\n\ @param\ visited\ True\ if\ this\ node\ has\ been\ visited,\ false\ if\ not\r\n
comment11.params=bestPrevious
comment11.target=void\ setBestPrevious(GraphPoint)
comment11.text=\r\n\ Sets\ the\ reference\ of\ the\ best\ previous\ neighbour\ of\ this\ node\ to\ a\ new\ value.\r\n\ @param\ bestPrevious\ The\ new\ best\ previous\ neighbour\ of\ this\ node.\r\n
comment12.params=neighbour\ location
comment12.target=void\ addNeighbour(GraphPoint,\ java.lang.String)
comment12.text=\r\n\ Setter\ for\ the\ instance\ of\ a\ specific\ neighbour\ of\ this\ node.\ The\ 8\ \r\n\ neighbours\ of\ this\ node\ are\ arranged\ like\ the\ neighbours\ of\ a\ square\r\n\ on\ a\ chess\ board\:\ one\ in\ the\ upper\ left,\ one\ directly\ above,\ one\ in\ \r\n\ the\ upper\ right,\ one\ to\ the\ left,\ one\ to\ the\ right,\ one\ in\ the\ lower\r\n\ left,\ one\ directly\ below,\ one\ to\ the\ lower\ right.\ This\ method\ sets\r\n\ a\ specific\ neighbour\ reference\ to\ a\ new\ value\ based\ on\ the\ string\ \r\n\ argument\ which\ specifies\ it's\ position\ relative\ to\ this\ node.\ If\ the\ \r\n\ string\ argument\ does\ not\ match\ any\ of\ the\ predetermined\ acceptable\ \r\n\ string\ arguments\ ("upper\ left",\ "upper",\ "upper\ right","left","right",\r\n\ "lower\ left","lower","lower\ right"),\ it\ throws\ an\ exception.\r\n\ @param\ neighbour\ The\ new\ neighbour\ of\ this\ node.\r\n\ @param\ location\ The\ location\ of\ this\ new\ neighbour\ relative\ to\ this\ node.\r\n\ @throws\ IllegalArgumentException\r\n
comment13.params=
comment13.target=void\ reset()
comment13.text=Resets\ this\ graph\ point\ to\ prepare\ it\ to\ be\ used\ for\ another\ execution\ \r\nof\ the\ shortest\ path\ algorithm.
comment14.params=otherPoint
comment14.target=int\ compareTo(GraphPoint)
comment14.text=\r\n\ Compares\ this\ node\ with\ other\ nodes\ in\ the\ graph.\ This\ method\ implements\r\n\ the\ method\ in\ the\ Comparable\ interface\ to\ be\ used\ in\ the\ shortest\ path\ \r\n\ algorithm\ in\ a\ priority\ queue.\ A\ node\ is\ considered\ to\ be\ greater\ than\ \r\n\ another\ node\ if\ it's\ tentative\ distance\ is\ smaller\ than\ the\ other's.\ As\r\n\ a\ result,\ nodes\ will\ be\ ordered\ in\ a\ priority\ queue\ so\ that\ at\ the\ head\r\n\ of\ the\ queue\ is\ the\ node\ with\ the\ smallest\ tentative\ distance.\r\n\ @param\ otherPoint\ Another\ node\ that\ this\ node\ is\ compared\ against.\r\n
comment15.params=x\ y\ world
comment15.target=boolean\ isIntersectingWall(int,\ int,\ greenfoot.World)
comment15.text=\r\n\ Determines\ whether\ a\ node\ could\ not\ be\ safely\ placed\ at\ a\ certain\ position\ \r\n\ in\ the\ given\ game\ world\ so\ that\ a\ tank\ can\ drive\ through\ it\ .\r\n\ @param\ x\ The\ x\ coordinate\ of\ that\ position\ in\ the\ game\ world.\r\n\ @param\ y\ The\ y\ coordinate\ of\ that\ position\ in\ the\ game\ world.\r\n\ @param\ world\ A\ reference\ to\ the\ game\ world\ where\ a\ node\ is\ meant\ to\ be\ \r\n\ placed.\r\n\ @return\ True\ if\ the\ position\ in\ the\ game\ world\ could\ not\ be\ passed\ through\r\n\ by\ a\ tank\ without\ it\ hitting\ a\ wall,\ false\ if\ it\ could.\r\n
comment16.params=a\ b
comment16.target=double\ getDistance(GraphPoint,\ GraphPoint)
comment16.text=\r\n\ Calculates\ the\ distance\ between\ 2\ nodes.\r\n\ @param\ a\ A\ GraphPoint\ object.\r\n\ @param\ b\ Another\ GraphPoint\r\n\ @return\ The\ distance\ between\ the\ 2\ nodes.\r\n
comment17.params=mine
comment17.target=double\ getDistanceFrom(LandMine)
comment17.text=\r\n\ Calculates\ the\ distance\ between\ this\ node\ and\ the\ given\ land\ mine.\r\n\ @param\ mine\ The\ mine\ whose\ distance\ to\ this\ node\ will\ be\ calculated.\r\n\ @return\ The\ distance\ between\ this\ node\ and\ the\ given\ mine,\ as\ a\ double.\r\n
comment2.params=
comment2.target=int\ getX()
comment2.text=\r\n\ Getter\ for\ the\ x\ coordinate\ of\ the\ point\ in\ the\ game\ world\ this\ node\ \r\n\ represents.\r\n\ @return\ The\ x\ coordinate\ of\ this\ node.\r\n
comment3.params=
comment3.target=int\ getY()
comment3.text=\r\n\ Getter\ for\ the\ y\ coordinate\ of\ the\ point\ in\ the\ game\ world\ this\ node\ \r\n\ represents.\r\n\ @return\ The\ y\ coordinate\ of\ this\ node.\r\n
comment4.params=
comment4.target=double\ getDistance()
comment4.text=\r\n\ Getter\ for\ the\ tentative\ distance\ of\ this\ node.\r\n\ @return\ The\ tentative\ distance\ of\ this\ node.\r\n
comment5.params=
comment5.target=GraphPoint\ getBestPrevious()
comment5.text=\r\n\ Getter\ for\ the\ best\ previous\ node\ of\ this\ node.\r\n\ @return\ The\ best\ previous\ node\ of\ this\ node.\r\n
comment6.params=
comment6.target=GraphPoint[]\ getNeighbours()
comment6.text=\r\n\ Getter\ for\ the\ array\ of\ neighbours\ of\ this\ node.\r\n\ @return\ The\ array\ of\ neighbours\ of\ this\ node.\r\n
comment7.params=
comment7.target=boolean\ isVisited()
comment7.text=\r\n\ Says\ if\ this\ node\ was\ visited\ or\ not\ in\ the\ current\ execution\ of\ the\ \r\n\ shortest\ path\ algorithm.\r\n\ @return\ True\ if\ this\ node\ has\ been\ visited,\ false\ if\ not.\r\n
comment8.params=position
comment8.target=GraphPoint\ getNeighbour(java.lang.String)
comment8.text=\r\n\ Getter\ for\ the\ instance\ of\ a\ specific\ neighbour\ of\ this\ node.\ The\ 8\ \r\n\ neighbours\ of\ this\ node\ are\ arranged\ like\ the\ neighbours\ of\ a\ square\r\n\ on\ a\ chess\ board\:\ one\ in\ the\ upper\ left,\ one\ directly\ above,\ one\ in\ \r\n\ the\ upper\ right,\ one\ to\ the\ left,\ one\ to\ the\ right,\ one\ in\ the\ lower\r\n\ left,\ one\ directly\ below,\ one\ to\ the\ lower\ right.\ This\ method\ returns\r\n\ a\ specific\ neighbour\ based\ on\ the\ string\ argument\ which\ specifies\ it's\r\n\ position\ relative\ to\ this\ node.\ If\ the\ string\ argument\ does\ not\ match\ \r\n\ any\ of\ the\ predetermined\ acceptable\ string\ arguments\ ("upper\ left",\ \r\n\ "upper",\ "upper\ right","left","right","lower\ left","lower","lower\ right"),\r\n\ it\ throws\ an\ exception.\r\n\ @param\ position\ The\ position\ of\ the\ neighbour\ relative\ to\ this\ node.\r\n\ @return\ The\ neighbour\ specified\ by\ the\ string\ argument.\r\n\ @throws\ IllegalArgumentException\r\n
comment9.params=distance
comment9.target=void\ setDistance(double)
comment9.text=\r\n\ Sets\ the\ tentative\ distance\ of\ this\ node\ to\ a\ new\ value.\r\n\ @param\ distance\ The\ new\ value\ of\ this\ node's\ tentative\ distance.\r\n
numComments=18
