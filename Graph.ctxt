#BlueJ class context
comment0.target=Graph
comment0.text=\r\n\ <p><b>File\ name\:\ </b>\ Graph.java\r\n\ @version\ 1.0\r\n\ @since\ 27.07.2018\r\n\ <p><b>Last\ modification\ date\:\ </b>\ 01.09.2018\r\n\ @author\ Alexandru\ F.\ Dascalu\r\n\ <p><b>Copyright\:\ </b>\r\n\ <p>No\ copyright.\r\n\ \r\n\ <p><b>Purpose\:\ </b>\r\n\ <p>\ This\ class\ describes\ a\ graph\ used\ for\ finding\ the\ shortest\ path\ for\ a\ Greenfoot\r\n\ recreation\ of\ the\ Wii\ Tanks\ game\ for\ the\ Nintendo\ Wii.\ It\ builds\ a\ network\ of\r\n\ nodes\ base\ on\ an\ instance\ of\ a\ TankWorld\ so\ that\ nodes\ are\ where\ a\ tank\ can\ move\r\n\ safely\ without\ hitting\ walls.\r\n\ \r\n\ <p><b>Version\ History</b>\r\n\ <p>\t-1.0\ -\ Created\ the\ class.\r\n
comment1.params=tankWorld
comment1.target=Graph(TankWorld)
comment1.text=\r\n\ Makes\ a\ new\ Graph\ that\ matches\ the\ layout\ of\ the\ given\ instance\ of\ TankWorld.\r\n\ This\ means\ it\ will\ make\ a\ graph\ where\ if\ a\ point\ in\ the\ world\ is\ too\ close\ to\r\n\ a\ wall,\ it\ will\ be\ a\ null\ value\ in\ the\ matrix\ so\ that\ the\ tank\ will\ not\ \r\n\ pass\ through\ walls.\ It\ also\ addes\ the\ edges\ between\ neighbouring\ nodes\ while\r\n\ making\ new\ nodes.\r\n\ @param\ tankWorld\ The\ world\ this\ graph\ is\ built\ for.\r\n
comment2.params=rowIndex\ columnIndex
comment2.target=GraphPoint\ getPoint(int,\ int)
comment2.text=\r\n\ Getter\ for\ individual\ nodes\ of\ this\ graph.\ Returns\ the\ node\ at\ the\ given\r\n\ index\ in\ the\ matrix.\r\n\ @param\ rowIndex\ The\ row\ index\ of\ the\ node\ to\ be\ returned.\r\n\ @param\ columnIndex\ The\ column\ index\ of\ the\ node\ to\ be\ returned.\r\n\ @return\ The\ point\ in\ the\ matrix\ at\ the\ given\ indexes.\r\n
comment3.params=startX\ startY\ target
comment3.target=java.util.LinkedList\ getShortestPath(int,\ int,\ GraphPoint)
comment3.text=\r\n\ Computes\ the\ shortest\ path\ between\ the\ given\ coordinates\ in\ the\ game\ \r\n\ world\ and\ the\ target\ node\ in\ this\ graph\ using\ Diejkstr'a\ algorithm.\r\n\ @param\ startX\ The\ starting\ x\ coordinate.\r\n\ @param\ startY\ The\ starting\ y\ coordinate.\r\n\ @param\ target\ The\ node\ in\ the\ graph\ that\ is\ the\ destination.\r\n\ @return\ A\ LinkedList\ of\ graph\ nodes\ (GraphPoint\ objects)\ that\ is\ the\ \r\n\ shortest\ path\ to\ the\ target\ node.\r\n
comment4.params=startX\ startY
comment4.target=void\ initializeSourcePoint(int,\ int)
comment4.text=\r\n\ Finds\ the\ node\ in\ the\ graph\ closest\ to\ the\ given\ coordinates\ in\ the\ game\r\n\ world\ and\ initialises\ it's\ tentative\ distance.\r\n\ @param\ startX\ The\ starting\ x\ coordinate.\r\n\ @param\ startY\ The\ starting\ y\ coordinate.\r\n
comment5.params=target
comment5.target=java.util.LinkedList\ getPath(GraphPoint)
comment5.text=\r\n\ Builds\ and\ returns\ the\ linked\ list\ that\ is\ the\ path\ between\ the\ source\r\n\ point\ and\ the\ target\ node.\r\n\ @param\ target\ The\ target\ node\ the\ tank\ will\ move\ to.\r\n\ @return\ The\ linked\ list\ of\ nodes\ in\ the\ graph\ starting\ from\ the\ source\r\n\ to\ the\ destination\ node.\r\n
comment6.params=
comment6.target=void\ resetGraph()
comment6.text=Resets\ the\ graph\ to\ prepare\ for\ the\ next\ call\ of\ the\ getShortestPath.
numComments=7
